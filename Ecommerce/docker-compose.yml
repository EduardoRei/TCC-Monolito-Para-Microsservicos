
services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: sqlserver
    environment:
      SA_PASSWORD: "YourPassword123!"
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Developer"
    ports:
      - "1433:1433"
    networks:
      - ecommerce-network

  produto-api:
    build:
      context: .
      dockerfile: ./Ecommerce.Microsservico/Ecommerce.Microsservico.Produto.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5001:8080"
    depends_on:
      - "sqlserver"
    networks:
      - ecommerce-network

  usuario-api:
    build:
      context: .
      dockerfile: ./Ecommerce.Microsservico/Ecommerce.Microsservico.Usuario.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5002:8080"
    depends_on:
      - "sqlserver"
    networks:
      - ecommerce-network

  pagamento-api:
    build:
      context: .
      dockerfile: ./Ecommerce.Microsservico/Ecommerce.Microsservico.Pagamento.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5003:8080"
    depends_on:
      - "sqlserver"
    networks:
      - ecommerce-network

  pedido-api:
    build:
      context: .
      dockerfile: ./Ecommerce.Microsservico/Ecommerce.Microsservico.Pedido.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5004:8080"
    depends_on:
      - "sqlserver"
    networks:
      - ecommerce-network

  rabbitmq-consumer:
    build:
      context: .
      dockerfile: ./Ecommerce.Microsservico/Consumer/RabbitMqConsumer/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5005:8080"
    depends_on:
      - "rabbitmq"
    networks:
      - ecommerce-network
    restart: always

  monolito:
    build:
      context: .
      dockerfile: ./Ecommerce.Monolito/Ecommerce.Monolito/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5000:8080"
    depends_on:
      - "sqlserver"
    networks:
      - ecommerce-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - ecommerce-network

  kong:
    image: kong:3.6
    container_name: kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./kong:/kong 
    ports:
      - "8000:8000"   # Proxy (exposto ao p√∫blico)
      - "8001:8001"   # Admin API (somente leitura no modo dbless)
    networks:
      - ecommerce-network

volumes:
  sqlserver-data:

networks:
  ecommerce-network:
    driver: bridge